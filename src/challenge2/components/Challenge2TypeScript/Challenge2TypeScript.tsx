import { Link } from "react-router";
import CodeJs from "../../../components/CodeJs/CodeJs";
import CodeTs from "../../../components/CodeTs/CodeTs";

const Challenge2TypeScript: React.FC = () => {
  return (
    <>
      <h1>Reto 2-fase 1: TypeScript</h1>
      <img src="/images/typescript.png" alt="Logotipo de TypeScript" />
      <p>
        Ya has empezado a usar JavaScript, pero el lenguaje de programaci√≥n que
        usamos en el proyecto es <strong>TypeScript</strong>. No te preocupes,
        TypeScript se construye sobre JavaScript, por tanto todo lo que ya sabes
        de JavaScript va a seguir funcionando igual.
      </p>
      <p>
        Hasta ahora no ten√≠as que compilar tu c√≥digo porque Node.js y el browser
        son capaces de ejecutar directamente el JS que escribes. Al usar
        TypeScript necesitamos meter un paso de compilaci√≥n. P√°rate un momento a
        repasar la parte del reto 1 donde habl√°bamos de esta diferencia:{" "}
        <Link to="/challenge1/calentando-motores-js#lenguajes-interpretados-vs-lenguajes-compilados">
          Lenguajes interpretados vs lenguajes compilados
        </Link>
        .
      </p>
      <p>Y aqu√≠ tienes una explicaci√≥n en v√≠deo:</p>
      <div className="picture">
        <iframe
          width="560"
          height="315"
          src="https://www.youtube.com/embed/sBdWFzmiXN8?si=vfE2JuytK-WzZICZ"
          title="YouTube video player"
          frameBorder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
          allowFullScreen
        ></iframe>
      </div>
      <h2>Tipado fuerte</h2>
      <p>
        Has aprendido que en JavaScript los valores tienen un{" "}
        <strong>tipo</strong>. Hemos visto el tipo <strong>number</strong>, el
        tipo <strong>string</strong>, el tipo <strong>boolean</strong>. Si has
        investigado un poco, habr√°s visto que hay otros tipos, como{" "}
        <strong>object</strong> y <strong>function</strong>. Y hay m√°s üòâ.
      </p>
      <p>
        JavaScript es un lenguaje <strong>de tipado d√©bil</strong>, esto quiere
        decir que la misma variable puede apuntar a un tipo de valor en un
        momento y luego a otro tipo de valor en otro momento. Esto es una
        caracter√≠stica de JS que lo hace un lenguaje muy flexible, pero que
        puede llevar a muchos errores dif√≠ciles de encontrar.
      </p>
      <p>Por ejemplo:</p>
      <CodeJs>{`// JS permite hacer esto
let x = 5; // x es de tipo number
x = "hola"; // ahora x es de tipo string`}</CodeJs>
      <div className="featured">
        <h3>Predictibilidad del c√≥digo</h3>
        <p>
          Una de las caracter√≠sticas del buen c√≥digo es su{" "}
          <strong>predictibilidad</strong>. Se debe poder predecir c√≥mo se va a
          comportar el c√≥digo en cada momento. Si yo declaro una variable con un
          valor de tipo string, y JavaScript permite reasignarle un valor de
          otro tipo, yo no puedo predecir que esa variable vaya a contener un
          string. Por tanto, llamar al m√©todo <code>toUpperCase</code> de esa
          variable me podr√≠a dar un error cuando despu√©s ejecute mi programa, y
          no lo puedo predecir con antelaci√≥n.
        </p>
        <CodeJs>{`let greeting = "hola";
greeting.toUpperCase(); // Esto funciona

greeting = 5;
greeting.toUpperCase(); // Esto dar√° un error, y TypeScript me va a avisar con antelaci√≥n`}</CodeJs>
        <p>
          El c√≥digo tiene que ser <strong>predecible</strong>.
        </p>
      </div>
      <p>
        TypeScript, por contra, <strong>es un lenguaje de tipado fuerte</strong>
        . Esto quiere decir que una vez que una variable ha sido declarada con
        un tipo, no se le puede asignar un valor de otro tipo. Esto hace que el
        c√≥digo sea mucho m√°s predecible, y por tanto, m√°s f√°cil de mantener y
        menos propenso a errores.
      </p>
      <CodeTs>{`let x = 5;
x = "hola"; // TypeScript no permite hacer esto`}</CodeTs>
      <p>
        <Link
          to="https://www.typescriptlang.org/play/?#code/DYUwLgBAHhC8EFYDcAoA9GiBRAzgYwCcBLAIxAmAEMIciBzAVyJADsxzgBblkagEw4B7HBEoAHBmxAiAnhEEkcIAgDdqeAM8BbQRAAqMsSADKhImMhbKBPNRDAIygoIKOWEZwCtBQA"
          target="_blank"
        >
          ‚å®Ô∏è‚¨ÜÔ∏è prueba este c√≥digo ‚¨ÜÔ∏è‚å®Ô∏è
        </Link>
      </p>
      <p>
        TypeScript nos va a ayudar a que nuestro c√≥digo sea m√°s predecible.
        Volviendo al ejemplo de la variable <code>greeting</code>:
      </p>
      <CodeTs>{`let greeting = "hola"; // Siempre va a ser tipo string
greeting.toUpperCase(); // Esto funciona

greeting = 5; // TypeScript no permite hacer esto
greeting.toUpperCase(); // Nunca se llegar√≠a a ejecutar esta l√≠nea`}</CodeTs>
      <p>
        <Link
          to="https://www.typescriptlang.org/play/?#code/DYUwLgBA5gTi4EsB2UIF4ICIAWB7YAhpgNwQD0ZEAygiALYAOcEAbgROwM4gwRgINcETmBjIoAKFjx+KAHRhcAVQYMeAYQLcAFAEpSFCAFERQgGYBXJAGMEuJAQkTDJ62IBGICIU7CEUC1okMBBfYABbpBAtCAATL2BcXwIGKxDfAE8IXHduGDYIawBnuiEAFQy1KjcBSDoCGGt2EGAIHhhcXhAkCA6AK1wJIA"
          target="_blank"
        >
          ‚å®Ô∏è‚¨ÜÔ∏è prueba este c√≥digo ‚¨ÜÔ∏è‚å®Ô∏è
        </Link>
      </p>
      <p>
        ¬øQuieres empezar? Pues venga, escribe{" "}
        <Link to="/challenge2/typescript/tu-primer-programa-en-typescript">
          tu primer programa en TypeScript
        </Link>
        .
      </p>
    </>
  );
};

export default Challenge2TypeScript;
